use url::Url;

#[rustfmt::skip]
const LOG2_TABLE: [f64; 266] = [
    0.0, 1.0, 1.58496250072116, 2.0, 2.32192809488736, 2.58496250072116, 2.80735492205761, 3.0, 3.16992500144231, 3.32192809488736, 3.4594316186373,
    3.58496250072116, 3.70043971814109, 3.80735492205761, 3.90689059560852, 4.0, 4.08746284125034, 4.16992500144231, 4.24792751344359, 4.32192809488736, 4.39231742277876, 4.4594316186373, 4.52356195605701,
    4.58496250072116, 4.64385618977472, 4.70043971814109, 4.75488750216347, 4.80735492205761, 4.85798099512757, 4.90689059560852, 4.95419631038687, 5.0, 5.04439411935845, 5.08746284125034, 5.12928301694497,
    5.16992500144231, 5.20945336562895, 5.24792751344359, 5.28540221886225, 5.32192809488736, 5.35754500516315, 5.39231742277876, 5.4262647547021, 5.4594316186373, 5.49185309632967, 5.52356195605701, 5.55458885167764,
    5.58496250072116, 5.61470984411521, 5.64385618977472, 5.67242534197149, 5.70043971814109, 5.72792045456319, 5.75488750216347, 5.78135971352466, 5.80735492205761, 5.83289001416474, 5.85798099512757, 5.8826430493618,
    5.90689059560852, 5.93073733756289, 5.95419631038687, 5.97727992349992, 6.0, 6.02236781302845, 6.04439411935845, 6.06608919045777, 6.08746284125034, 6.10852445677817, 6.12928301694497, 6.14974711950468,
    6.16992500144231, 6.18982455888002, 6.20945336562895, 6.22881869049588, 6.24792751344359, 6.26678654081546, 6.28540221886225, 6.30378074817898, 6.32192809488736, 6.33985000288462, 6.35754500516315, 6.37502417701981,
    6.39231742277876, 6.40942404289556, 6.4262647547021, 6.44294349584873, 6.4594316186373, 6.47573343096639, 6.49185309632967, 6.5078996852096, 6.52356195605701, 6.5391334196556, 6.55458885167764, 6.56985560833094,
    6.58496250072116, 6.59991284218713, 6.61470984411521, 6.62935662007961, 6.64385618977472, 6.65821148275179, 6.67242534197149, 6.68649929501035, 6.70043971814109, 6.71424551766612, 6.72792045456319, 6.7414641143965,
    6.75488750216347, 6.76818432477693, 6.78135971352466, 6.79441586635011, 6.80735492205761, 6.82017896241519, 6.83289001416474, 6.84549005094437, 6.85798099512757, 6.87036471958697, 6.8826430493618, 6.89481776330794,
    6.90689059560852, 6.91886323727459, 6.93073733756289, 6.94251450534505, 6.95419631038687, 6.96578428466209, 6.97727992349992, 6.98868468677217, 7.0, 7.01122725542325, 7.02236781302845, 7.03342300153745,
    7.04439411935845, 7.05528243550119, 7.06608919045777, 7.07681559705083, 7.08746284125034, 7.09803208296053, 7.10852445677817, 7.1189400727743, 7.12928301694497, 7.13955439315699, 7.14974711950468, 7.15986310682071,
    7.16992500144231, 7.17992438223906, 7.18982455888002, 7.19966767246921, 7.20945336562895, 7.21918033081779, 7.22881869049588, 7.23836813486031, 7.24792751344359, 7.25739483914493, 7.26678654081546, 7.27610503236962,
    7.28540221886225, 7.29460003831079, 7.30378074817898, 7.31294464702193, 7.32192809488736, 7.33088645276292, 7.33978952727983, 7.34865735301655, 7.35754500516315, 7.36636296387276, 7.37502417701981, 7.38372634126876,
    7.39231742277876, 7.40079910162001, 7.40942404289556, 7.41794550355941, 7.4262647547021, 7.43458327482728, 7.44294349584873, 7.45124802026768, 7.4594316186373, 7.46763770428525, 7.47573343096639, 7.4837668227518,
    7.49177654013734, 7.49976292444436, 7.5078996852096, 7.51599387285831, 7.52356195605701, 7.53102357220008, 7.5383783094129, 7.5456781022542, 7.55289807901687, 7.56006010618401, 7.5671958798903, 7.57427715175804,
    7.58130450574303, 7.58828850595453, 7.59521962894605, 7.6020994022609, 7.60892927414347, 7.61570052691568, 7.62241453295473, 7.62911257024033, 7.63575489075186, 7.64235192621145, 7.64890409554582, 7.65541175595252,
    7.66187524049314, 7.66829485173028, 7.67467088697187, 7.68100363756973, 7.6872934044915, 7.69354047624818, 7.69975096142055, 7.7059154589127, 7.71204454811827, 7.71813881318618, 7.72419883431336, 7.73022508546608,
    7.7362181757654, 7.74217869500587, 7.74810723148085, 7.75400436991233, 7.75987670440987, 7.76572762566766, 7.77152551082531, 7.77729332075444, 7.78303082256314, 7.78873877876593, 7.7944169602235, 7.80006614903389,
    7.80569712333694, 7.81130066254706, 7.81687753499694, 7.82242851807391, 7.82795428885912, 7.83345553339351, 7.83893294781517, 7.8443872161239, 7.84981901647906, 7.85522902697709, 7.8606170328704, 7.86598371309689,
    7.87132975731341, 7.87665584581527, 7.88196265473055, 7.88725086314494, 7.89252115512693, 7.89777418358865, 7.9030105994401, 7.90823104597264, 7.91343616945916, 7.91862660122018, 7.92380795743902, 7.92898183248042,
    7.93413882066904, 7.93927950669592, 7.94440447725603, 7.94951431114968, 7.95460958865984, 7.95969097905336, 7.96475913175448, 7.96981468981001, 7.97485829237221, 7.97989056732536, 7.98491213998421, 7.98992362045707,
    7.99492558277744, 7.99991869888166, 8.0,
];
// program uses precomputed log2 values for 0-266 to avoid using ln() in the loop for performance

pub fn calculate_entropy(data: &[u8]) -> f64 {
    if data.is_empty() {
        return 0.0;
    }

    let mut byte_counts = [0u64; 256];
    let len = data.len() as f64;

    for &byte in data {
        byte_counts[byte as usize] += 1;
    }

    let mut entropy = 0.0;
    for &count in byte_counts.iter().filter(|&&c| c > 0) {
        let probability = count as f64 / len;

        if count < 266 {
            entropy -= probability * LOG2_TABLE[count as usize];
        } else {
            entropy -= probability * (probability.ln() / std::f64::consts::LN_2);
        }
    }

    entropy
}

pub fn truncate_string(s: &str, max_len: usize) -> String {
    if s.chars().count() <= max_len {
        s.to_string()
    } else {
        let mut truncated: String = s.chars().take(max_len.saturating_sub(3)).collect();
        truncated.push_str("...");
        truncated
    }
}

pub fn extract_domain(url_str: &str) -> String {
    if url_str.starts_with("http://") {
        let domain_part = &url_str[7..];
        let end = domain_part.find('/').unwrap_or(domain_part.len());
        let domain = &domain_part[..end];
        return domain.trim_start_matches("www.").to_lowercase();
    } else if url_str.starts_with("https://") {
        let domain_part = &url_str[8..];
        let end = domain_part.find('/').unwrap_or(domain_part.len());
        let domain = &domain_part[..end];
        return domain.trim_start_matches("www.").to_lowercase();
    }

    let url_to_parse = if !url_str.contains("://") && url_str.contains('.') {
        format!("http://{}", url_str)
    } else {
        url_str.to_string()
    };

    Url::parse(&url_to_parse)
        .ok()
        .and_then(|url| {
            url.host_str()
                .map(|host| host.trim_start_matches("www.").to_lowercase())
        })
        .unwrap_or_else(|| {
            url_str
                .split_once("://")
                .map_or(url_str, |(_scheme, rest)| rest)
                .split('/')
                .next()
                .unwrap_or("")
                .split('@')
                .last()
                .unwrap_or("")
                .split(':')
                .next()
                .unwrap_or("")
                .trim_start_matches("www.")
                .to_lowercase()
        })
}

pub fn get_simple_name(fqn: &str) -> &str {
    let name_part = fqn.strip_suffix('/').unwrap_or(fqn);
    name_part
        .rsplit(|c| c == '/' || c == '.')
        .next()
        .unwrap_or(name_part)
}
